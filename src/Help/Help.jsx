import React, { useState, useRef, useEffect } from "react";
import ReactMarkdown from "react-markdown";
import * as use from "@tensorflow-models/universal-sentence-encoder";
import * as tf from "@tensorflow/tfjs";
import { bankingKnowledgeEnglish } from "./BankingKnowledge/BankingKnowledge";
import { bankingKnowledgesHindi } from "./BankingKnowledge/BankingKnowledge";
import { languageContents } from "./BankingKnowledge/LanguageContent";

const Help = () => {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isModelLoading, setIsModelLoading] = useState(true);
  const [model, setModel] = useState(null);
  const messagesEndRef = useRef(null);
  const [conversationContext, setConversationContext] = useState([]);
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef(null);
  const [bankingKnowledge, setBankingKnowledge] = useState([]);
  const [currentLanguage, setCurrentLanguage] = useState("en");
  const [isOpen, setIsOpen] = useState(false);
  // const[languageContent , setLangContent] = useState();
  const [availableLanguages, setAvailableLanguages] = useState([
    { code: "en", name: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
    { code: "hi", name: "Hindi", flag: "ЁЯЗоЁЯЗ│" },
    { code: "es", name: "Spanish", flag: "ЁЯЗкЁЯЗ╕" },
    { code: "fr", name: "French", flag: "ЁЯЗлЁЯЗ╖" },
    { code: "de", name: "German", flag: "ЁЯЗйЁЯЗк" },
    { code: "pt", name: "Portuguese", flag: "ЁЯЗ╡ЁЯЗ╣" },
    { code: "it", name: "Italian", flag: "ЁЯЗоЁЯЗ╣" },
    { code: "ru", name: "Russian", flag: "ЁЯЗ╖ЁЯЗ║" },
    { code: "ja", name: "Japanese", flag: "ЁЯЗпЁЯЗ╡" },
    { code: "zh", name: "Chinese", flag: "ЁЯЗиЁЯЗ│" },
    { code: "ar", name: "Arabic", flag: "ЁЯЗ╕ЁЯЗж" },
  ]);


  ///console.log(languageContent)

  // Language-specific content

  const languageContent = {
    en: {
      greeting:
        "Hello! I'm your AI banking assistant. How can I help you today? ЁЯСЛ",
      listening: "Listening...",
      notUnderstood: "Sorry, I couldn't hear you clearly. Please try again. ЁЯОд",
      quickQuestionsTitle: "Quick questions:",
      quickQuestions: [
        "How to open an account?",
        "What's the minimum balance?",
        "How to transfer money?",
        "Lost my card - what to do?",
        "Loan eligibility criteria",
        "Current interest rates",
        "How to check account balance?",
        "Update contact information",
      ],
      placeholder: "Ask about banking services...",
      aiThinking: "AI is thinking...",
      fallbackResponses: [
        "I'm not sure I understand. Could you please rephrase your question?",
        "That's an interesting question. Let me connect you with a human specialist who can help.",
        "I'm still learning about banking services. Could you try asking in a different way?",
        "I don't have information about that yet. Please contact our customer support at 1800-123-4567 for assistance.",
      ],
      errorMessage:
        "I'm experiencing technical difficulties. Please try again later or contact our customer support at 1800-123-4567. ЁЯЫая╕П",
    },
    hi: {
      greeting:
        "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рдмреИрдВрдХрд┐рдВрдЧ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ? ЁЯСЛ",
      listening: "рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ...",
      notUnderstood:
        "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рдЖрдкрдХреЛ рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдирд╣реАрдВ рд╕реБрди рд╕рдХрд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред ЁЯОд",
      quickQuestionsTitle: "рддреНрд╡рд░рд┐рдд рдкреНрд░рд╢реНрди:",
      quickQuestions: [
        "рдЦрд╛рддрд╛ рдХреИрд╕реЗ рдЦреЛрд▓реЗрдВ?",
        "рдиреНрдпреВрдирддрдо рд╢реЗрд╖ рд░рд╛рд╢рд┐ рдХреНрдпрд╛ рд╣реИ?",
        "рдкреИрд╕реЗ рдХреИрд╕реЗ рдЯреНрд░рд╛рдВрд╕рдлрд░ рдХрд░реЗрдВ?",
        "рдореЗрд░рд╛ рдХрд╛рд░реНрдб рдЦреЛ рдЧрдпрд╛ - рдХреНрдпрд╛ рдХрд░реЗрдВ?",
        "рд▓реЛрди рдкрд╛рддреНрд░рддрд╛ рдорд╛рдирджрдВрдб",
        "рд╡рд░реНрддрдорд╛рди рдмреНрдпрд╛рдЬ рджрд░реЗрдВ",
        "рдЦрд╛рддрд╛ рд╢реЗрд╖ рдХреИрд╕реЗ рдЬрд╛рдВрдЪреЗрдВ?",
        "рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ",
      ],
      placeholder: "рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ...",
      aiThinking: "AI рд╕реЛрдЪ рд░рд╣рд╛ рд╣реИ...",
      fallbackResponses: [
        "рдореБрдЭреЗ рдпрдХреАрди рдирд╣реАрдВ рд╣реИ рдХрд┐ рдореИрдВ рд╕рдордЭ рдкрд╛рдпрд╛ред рдХреНрдпрд╛ рдЖрдк рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рджреЛрдмрд╛рд░рд╛ рдХрд╣ рд╕рдХрддреЗ рд╣реИрдВ?",
        "рдпрд╣ рдПрдХ рджрд┐рд▓рдЪрд╕реНрдк рд╕рд╡рд╛рд▓ рд╣реИред рдореИрдВ рдЖрдкрдХреЛ рдПрдХ рдорд╛рдирд╡ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдЬреЛрдбрд╝рддрд╛ рд╣реВрдВ рдЬреЛ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реИред",
        "рдореИрдВ рдЕрднреА рднреА рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реАрдЦ рд░рд╣рд╛ рд╣реВрдВред рдХреНрдпрд╛ рдЖрдк рдЗрд╕реЗ рдЕрд▓рдЧ рддрд░реАрдХреЗ рд╕реЗ рдкреВрдЫрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?",
        "рдореЗрд░реЗ рдкрд╛рд╕ рдЕрднреА рддрдХ рдЗрд╕рдХреА рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рд╣реИред рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рд╣рдорд╛рд░реЗ рдЧреНрд░рд╛рд╣рдХ рд╕рд╣рд╛рдпрддрд╛ 1800-123-4567 рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред",
      ],
      errorMessage:
        "рдореИрдВ рддрдХрдиреАрдХреА рдХрдард┐рдирд╛рдЗрдпреЛрдВ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣рд╛ рд╣реВрдВред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрд╛ рд╣рдорд╛рд░реЗ рдЧреНрд░рд╛рд╣рдХ рд╕рд╣рд╛рдпрддрд╛ 1800-123-4567 рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред ЁЯЫая╕П",
    },
    es: {
      greeting:
        "┬бHola! Soy tu asistente bancario IA. ┬┐C├│mo puedo ayudarte hoy? ЁЯСЛ",
      listening: "Escuchando...",
      notUnderstood:
        "Lo siento, no pude escucharte claramente. Por favor, int├йntalo de nuevo. ЁЯОд",
      quickQuestionsTitle: "Preguntas r├бpidas:",
      quickQuestions: [
        "┬┐C├│mo abrir una cuenta?",
        "┬┐Cu├бl es el saldo m├нnimo?",
        "┬┐C├│mo transferir dinero?",
        "Perd├н mi tarjeta, ┬┐qu├й debo hacer?",
        "Criterios de elegibilidad para pr├йstamos",
        "Tasas de inter├йs actuales",
        "┬┐C├│mo consultar el saldo de la cuenta?",
        "Actualizar informaci├│n de contacto",
      ],
      placeholder: "Pregunte sobre servicios bancarios...",
      aiThinking: "IA est├б pensando...",
      fallbackResponses: [
        "No estoy seguro de entender. ┬┐Podr├нa reformular su pregunta?",
        "Esa es una pregunta interesante. Perm├нtame conectarlo con un especialista humano que pueda ayudarlo.",
        "Todav├нa estoy aprendiendo sobre servicios bancarios. ┬┐Podr├нa intentar preguntar de otra manera?",
        "Todav├нa no tengo informaci├│n sobre eso. Comun├нquese con nuestro servicio de atenci├│n al cliente al 1800-123-4567 para obtener asistencia.",
      ],
      errorMessage:
        "Estoy experimentando dificultades t├йcnicas. Vuelva a intentarlo m├бs tarde o comun├нquese con nuestro servicio de atenci├│n al cliente al 1800-123-4567. ЁЯЫая╕П",
    },
    fr: {
      greeting:
        "Bonjour ! Je suis votre assistant bancaire IA. Comment puis-je vous aider aujourd'hui ? ЁЯСЛ",
      listening: "├Йcoute...",
      notUnderstood:
        "D├йsol├й, je n'ai pas pu vous entendre clairement. Veuillez r├йessayer. ЁЯОд",
      quickQuestionsTitle: "Questions rapides :",
      quickQuestions: [
        "Comment ouvrir un compte ?",
        "Quel est le solde minimum ?",
        "Comment transf├йrer de l'argent ?",
        "J'ai perdu ma carte - que faire ?",
        "Crit├иres d'├йligibilit├й aux pr├кts",
        "Taux d'int├йr├кt actuels",
        "Comment v├йrifier le solde du compte ?",
        "Mettre ├а jour les coordonn├йes",
      ],
      placeholder: "Renseignez-vous sur les services bancaires...",
      aiThinking: "L'IA r├йfl├йchit...",
      fallbackResponses: [
        "Je ne suis pas s├╗r de comprendre. Pourriez-vous reformuler votre question ?",
        "C'est une question int├йressante. Permettez-moi de vous mettre en contact avec un sp├йcialiste humain qui pourra vous aider.",
        "J'apprends encore les services bancaires. Pourriez-vous essayer de demander d'une autre mani├иre ?",
        "Je n'ai pas encore d'informations ├а ce sujet. Veuillez contacter notre service client au 1800-123-4567 pour obtenir de l'aide.",
      ],
      errorMessage:
        "Je rencontre des difficult├йs techniques. Veuillez r├йessayer plus tard ou contacter notre service client au 1800-123-4567. ЁЯЫая╕П",
    },
    de: {
      greeting:
        "Hallo! Ich bin Ihr KI-Banking-Assistent. Wie kann ich Ihnen heute helfen? ЁЯСЛ",
      listening: "H├╢re zu...",
      notUnderstood:
        "Entschuldigung, ich konnte Sie nicht klar verstehen. Bitte versuchen Sie es erneut. ЁЯОд",
      quickQuestionsTitle: "Schnelle Fragen:",
      quickQuestions: [
        "Wie er├╢ffne ich ein Konto?",
        "Was ist der Mindestguthaben?",
        "Wie ├╝berweise ich Geld?",
        "Karte verloren - was tun?",
        "Kreditvergabekriterien",
        "Aktuelle Zinss├дtze",
        "Wie ├╝berpr├╝fe ich den Kontostand?",
        "Kontaktinformationen aktualisieren",
      ],
      placeholder: "Fragen Sie zu Bankdienstleistungen...",
      aiThinking: "KI denkt nach...",
      fallbackResponses: [
        "Ich bin mir nicht sicher, ob ich verstehe. K├╢nnten Sie Ihre Frage bitte umformulieren?",
        "Das ist eine interessante Frage. Lassen Sie mich Sie mit einem menschlichen Spezialisten verbinden, der Ihnen helfen kann.",
        "Ich lerne noch ├╝ber Bankdienstleistungen. K├╢nnten Sie es versuchen, anders zu fragen?",
        "Ich habe dazu noch keine Informationen. Bitte wenden Sie sich an unseren Kundendienst unter 1800-123-4567.",
      ],
      errorMessage:
        "Ich habe technische Schwierigkeiten. Bitte versuchen Sie es sp├дter erneut oder wenden Sie sich an unseren Kundendienst unter 1800-123-4567. ЁЯЫая╕П",
    },
    pt: {
      greeting:
        "Ol├б! Sou seu assistente banc├бrio de IA. Como posso ajud├б-lo hoje? ЁЯСЛ",
      listening: "Ouvindo...",
      notUnderstood:
        "Desculpe, n├гo consegui ouvi-lo claramente. Por favor, tente novamente. ЁЯОд",
      quickQuestionsTitle: "Perguntas r├бpidas:",
      quickQuestions: [
        "Como abrir uma conta?",
        "Qual ├й o saldo m├нnimo?",
        "Como transferir dinheiro?",
        "Perdi meu cart├гo - o que fazer?",
        "Crit├йrios de elegibilidade para empr├йstimos",
        "Taxas de juros atuais",
        "Como verificar o saldo da conta?",
        "Atualizar informa├з├╡es de contato",
      ],
      placeholder: "Pergunte sobre servi├зos banc├бrios...",
      aiThinking: "IA est├б pensando...",
      fallbackResponses: [
        "N├гo tenho certeza se entendi. Voc├к poderia reformular sua pergunta?",
        "Essa ├й uma pergunta interessante. Deixe-me conect├б-lo com um especialista humano que pode ajudar.",
        "Ainda estou aprendendo sobre servi├зos banc├бrios. Voc├к poderia tentar perguntar de uma maneira diferente?",
        "Ainda n├гo tenho informa├з├╡es sobre isso. Entre em contato com nosso suporte ao cliente no 1800-123-4567 para obter assist├кncia.",
      ],
      errorMessage:
        "Estou enfrentando dificuldades t├йcnicas. Tente novamente mais tarde ou entre em contato com nosso suporte ao cliente no 1800-123-4567. ЁЯЫая╕П",
    },
    it: {
      greeting:
        "Ciao! Sono il tuo assistente bancario AI. Come posso aiutarti oggi? ЁЯСЛ",
      listening: "Ascoltando...",
      notUnderstood:
        "Scusa, non ho potuto sentirti chiaramente. Per favore, riprova. ЁЯОд",
      quickQuestionsTitle: "Domande rapide:",
      quickQuestions: [
        "Come aprire un conto?",
        "Qual ├и il saldo minimo?",
        "Come trasferire denaro?",
        "Ho perso la mia carta - cosa fare?",
        "Criteri di idoneit├а al prestito",
        "Tassi di interesse attuali",
        "Come controllare il saldo del conto?",
        "Aggiornare informazioni di contatto",
      ],
      placeholder: "Chiedi informazioni sui servizi bancari...",
      aiThinking: "L'IA sta pensando...",
      fallbackResponses: [
        "Non sono sicuro di aver capito. Potresti riformulare la tua domanda?",
        "Questa ├и una domanda interessante. Lascia che ti metta in contatto con uno specialista umano che pu├▓ aiutarti.",
        "Sto ancora imparando i servizi bancari. Potresti provare a chiedere in un modo diverso?",
        "Non ho ancora informazioni al riguardo. Si prega di contattare il nostro supporto clienti al 1800-123-4567 per assistenza.",
      ],
      errorMessage:
        "Sto riscontrando difficolt├а tecniche. Riprova pi├╣ tardi o contatta il nostro supporto clienti al 1800-123-4567. ЁЯЫая╕П",
    },
    ru: {
      greeting:
        "╨Я╤А╨╕╨▓╨╡╤В! ╨п ╨▓╨░╤И ╨▒╨░╨╜╨║╨╛╨▓╤Б╨║╨╕╨╣ ╨┐╨╛╨╝╨╛╤Й╨╜╨╕╨║ ╤Б ╨Ш╨Ш. ╨Ъ╨░╨║ ╤П ╨╝╨╛╨│╤Г ╨▓╨░╨╝ ╨┐╨╛╨╝╨╛╤З╤М ╤Б╨╡╨│╨╛╨┤╨╜╤П? ЁЯСЛ",
      listening: "╨б╨╗╤Г╤И╨░╤О...",
      notUnderstood:
        "╨Ш╨╖╨▓╨╕╨╜╨╕╤В╨╡, ╤П ╨╜╨╡ ╤Б╨╝╨╛╨│ ╤З╨╡╤В╨║╨╛ ╨▓╨░╤Б ╤А╨░╤Б╤Б╨╗╤Л╤И╨░╤В╤М. ╨Я╨╛╨╢╨░╨╗╤Г╨╣╤Б╤В╨░, ╨┐╨╛╨┐╤А╨╛╨▒╤Г╨╣╤В╨╡ ╨╡╤Й╨╡ ╤А╨░╨╖. ЁЯОд",
      quickQuestionsTitle: "╨С╤Л╤Б╤В╤А╤Л╨╡ ╨▓╨╛╨┐╤А╨╛╤Б╤Л:",
      quickQuestions: [
        "╨Ъ╨░╨║ ╨╛╤В╨║╤А╤Л╤В╤М ╤Б╤З╨╡╤В?",
        "╨Ъ╨░╨║╨╛╨▓ ╨╝╨╕╨╜╨╕╨╝╨░╨╗╤М╨╜╤Л╨╣ ╨▒╨░╨╗╨░╨╜╤Б?",
        "╨Ъ╨░╨║ ╨┐╨╡╤А╨╡╨▓╨╡╤Б╤В╨╕ ╨┤╨╡╨╜╤М╨│╨╕?",
        "╨Я╨╛╤В╨╡╤А╤П╨╗ ╨║╨░╤А╤В╤Г - ╤З╤В╨╛ ╨┤╨╡╨╗╨░╤В╤М?",
        "╨Ъ╤А╨╕╤В╨╡╤А╨╕╨╕ ╨┐╤А╨╕╨╡╨╝╨╗╨╡╨╝╨╛╤Б╤В╨╕ ╨┤╨╗╤П ╨║╤А╨╡╨┤╨╕╤В╨░",
        "╨в╨╡╨║╤Г╤Й╨╕╨╡ ╨┐╤А╨╛╤Ж╨╡╨╜╤В╨╜╤Л╨╡ ╤Б╤В╨░╨▓╨║╨╕",
        "╨Ъ╨░╨║ ╨┐╤А╨╛╨▓╨╡╤А╨╕╤В╤М ╨▒╨░╨╗╨░╨╜╤Б ╤Б╤З╨╡╤В╨░?",
        "╨Ю╨▒╨╜╨╛╨▓╨╕╤В╤М ╨║╨╛╨╜╤В╨░╨║╤В╨╜╤Г╤О ╨╕╨╜╤Д╨╛╤А╨╝╨░╤Ж╨╕╤О",
      ],
      placeholder: "╨б╨┐╤А╨╛╤Б╨╕╤В╨╡ ╨╛ ╨▒╨░╨╜╨║╨╛╨▓╤Б╨║╨╕╤Е ╤Г╤Б╨╗╤Г╨│╨░╤Е...",
      aiThinking: "╨Ш╨Ш ╨┤╤Г╨╝╨░╨╡╤В...",
      fallbackResponses: [
        "╨п ╨╜╨╡ ╤Г╨▓╨╡╤А╨╡╨╜, ╤З╤В╨╛ ╨┐╨╛╨╜╨╕╨╝╨░╤О. ╨Э╨╡ ╨╝╨╛╨│╨╗╨╕ ╨▒╤Л ╨▓╤Л ╨┐╨╡╤А╨╡╤Д╤А╨░╨╖╨╕╤А╨╛╨▓╨░╤В╤М ╤Б╨▓╨╛╨╣ ╨▓╨╛╨┐╤А╨╛╤Б?",
        "╨н╤В╨╛ ╨╕╨╜╤В╨╡╤А╨╡╤Б╨╜╤Л╨╣ ╨▓╨╛╨┐╤А╨╛╤Б. ╨Я╨╛╨╖╨▓╨╛╨╗╤М╤В╨╡ ╨╝╨╜╨╡ ╤Б╨▓╤П╨╖╨░╤В╤М ╨▓╨░╤Б ╤Б ╤З╨╡╨╗╨╛╨▓╨╡╨║╨╛╨╝-╤Б╨┐╨╡╤Ж╨╕╨░╨╗╨╕╤Б╤В╨╛╨╝, ╨║╨╛╤В╨╛╤А╤Л╨╣ ╨╝╨╛╨╢╨╡╤В ╨┐╨╛╨╝╨╛╤З╤М.",
        "╨п ╨▓╤Б╨╡ ╨╡╤Й╨╡ ╨╕╨╖╤Г╤З╨░╤О ╨▒╨░╨╜╨║╨╛╨▓╤Б╨║╨╕╨╡ ╤Г╤Б╨╗╤Г╨│╨╕. ╨Э╨╡ ╨╝╨╛╨│╨╗╨╕ ╨▒╤Л ╨▓╤Л ╨┐╨╛╨┐╤А╨╛╨▒╨╛╨▓╨░╤В╤М ╨╖╨░╨┤╨░╤В╤М ╨▓╨╛╨┐╤А╨╛╤Б ╨┐╨╛-╨┤╤А╤Г╨│╨╛╨╝╤Г?",
        "╨г ╨╝╨╡╨╜╤П ╨┐╨╛╨║╨░ ╨╜╨╡╤В ╨╕╨╜╤Д╨╛╤А╨╝╨░╤Ж╨╕╨╕ ╨╛╨▒ ╤Н╤В╨╛╨╝. ╨Я╨╛╨╢╨░╨╗╤Г╨╣╤Б╤В╨░, ╤Б╨▓╤П╨╢╨╕╤В╨╡╤Б╤М ╤Б ╨╜╨░╤И╨╡╨╣ ╤Б╨╗╤Г╨╢╨▒╨╛╨╣ ╨┐╨╛╨┤╨┤╨╡╤А╨╢╨║╨╕ ╨┐╨╛ ╤В╨╡╨╗╨╡╤Д╨╛╨╜╤Г 1800-123-4567.",
      ],
      errorMessage:
        "╨г ╨╝╨╡╨╜╤П ╤В╨╡╤Е╨╜╨╕╤З╨╡╤Б╨║╨╕╨╡ ╤В╤А╤Г╨┤╨╜╨╛╤Б╤В╨╕. ╨Я╨╛╨╢╨░╨╗╤Г╨╣╤Б╤В╨░, ╨┐╨╛╨▓╤В╨╛╤А╨╕╤В╨╡ ╨┐╨╛╨┐╤Л╤В╨║╤Г ╨┐╨╛╨╖╨╢╨╡ ╨╕╨╗╨╕ ╤Б╨▓╤П╨╢╨╕╤В╨╡╤Б╤М ╤Б ╨╜╨░╤И╨╡╨╣ ╤Б╨╗╤Г╨╢╨▒╨╛╨╣ ╨┐╨╛╨┤╨┤╨╡╤А╨╢╨║╨╕ ╨┐╨╛ ╤В╨╡╨╗╨╡╤Д╨╛╨╜╤Г 1800-123-4567. ЁЯЫая╕П",
    },
    ja: {
      greeting:
        "уБУуВУуБлуБбуБпя╝БчзБуБпуБВуБкуБЯуБоAIуГРуГ│уВнуГ│уВ░уВвуВ╖уВ╣уВ┐уГ│уГИуБзуБЩуАВф╗КцЧеуБпуБйуБоуВИуБЖуБлуБКцЙЛф╝ЭуБДуБЧуБ╛уБЧуВЗуБЖуБЛя╝ЯЁЯСЛ",
      listening: "шБЮуБДуБжуБДуБ╛уБЩ...",
      notUnderstood:
        "чФ│уБЧши│уБВуВКуБ╛уБЫуВУуБМуАБуБпуБгуБНуВКуБишБЮуБНхПЦуВМуБ╛уБЫуВУуБзуБЧуБЯуАВуВВуБЖф╕Ах║жуБКшйжуБЧуБПуБауБХуБДуАВЁЯОд",
      quickQuestionsTitle: "ч░бхНШуБкш│кхХП:",
      quickQuestions: [
        "хПгх║зуБощЦЛшинцЦ╣ц│ХуБпя╝Я",
        "цЬАф╜ОцоЛщлШуБпуБДуБПуВЙуБзуБЩуБЛя╝Я",
        "щАБщЗСцЦ╣ц│ХуБпя╝Я",
        "уВлуГ╝уГЙуВТч┤Ыхд▒уБЧуБЯха┤хРИуБохп╛хЗжц│Х",
        "уГнуГ╝уГ│уБощБйца╝хЯ║ц║Ц",
        "чП╛хЬиуБощЗСхИй",
        "цоЛщлШчЕзф╝ЪцЦ╣ц│Х",
        "щАгч╡бхЕИцГЕха▒уБоцЫ┤цЦ░",
      ],
      placeholder: "щКАшбМуВ╡уГ╝уГУуВ╣уБлуБдуБДуБжш│кхХП...",
      aiThinking: "AIуБМшАГуБИф╕н...",
      fallbackResponses: [
        "чРЖшзгуБзуБНуБкуБЛуБгуБЯуВИуБЖуБзуБЩуАВш│кхХПуВТшиАуБДцПЫуБИуБжуБДуБЯуБауБСуБ╛уБЩуБЛя╝Я",
        "уБЭуВМуБпшИИхС│ц╖▒уБДш│кхХПуБзуБЩуАВх░ВщЦАхо╢уБлуБдуБкуБОуБ╛уБЧуВЗуБЖуАВ",
        "щКАшбМуВ╡уГ╝уГУуВ╣уБлуБдуБДуБжуБ╛уБахнжч┐Тф╕нуБзуБЩуАВхИеуБошиАуБДцЦ╣уБзш│кхХПуБЧуБжуБ┐уБжуБПуБауБХуБДуАВ",
        "уБЭуБоцГЕха▒уБпуБ╛уБауБВуВКуБ╛уБЫуВУуАВуВлуВ╣уВ┐уГЮуГ╝уВ╡уГЭуГ╝уГИя╝И1800-123-4567я╝ЙуБ╛уБзуБКхХПуБДхРИуВПуБЫуБПуБауБХуБДуАВ",
      ],
      errorMessage:
        "цКАшбУчЪДуБкхХПщбМуБМчЩ║чФЯуБЧуБжуБДуБ╛уБЩуАВх╛МуБзуВВуБЖф╕Ах║жуБКшйжуБЧуБДуБЯуБауБПуБЛуАБуВлуВ╣уВ┐уГЮуГ╝уВ╡уГЭуГ╝уГИя╝И1800-123-4567я╝ЙуБ╛уБзуБКхХПуБДхРИуВПуБЫуБПуБауБХуБДуАВЁЯЫая╕П",
    },
    zh: {
      greeting: "ф╜ахе╜я╝БцИСцШпцВичЪДAIщУ╢шбМхКйцЙЛуАВф╗КхдйцИСшГ╜ф╕║цВицПРф╛Ыф╗Аф╣Их╕охКйя╝ЯЁЯСЛ",
      listening: "цнгхЬишБЖхРм...",
      notUnderstood: "цК▒цнЙя╝МцИСц▓бцЬЙхРмц╕ЕцеЪцВичЪДшпЭуАВшп╖хЖНшпХф╕АцмбуАВЁЯОд",
      quickQuestionsTitle: "х┐лщАЯщЧощвШ:",
      quickQuestions: [
        "хжВф╜Хх╝АцИ╖я╝Я",
        "цЬАф╜Оф╜ЩщвЭцШпхдЪх░Ся╝Я",
        "хжВф╜Хш╜мш┤жя╝Я",
        "ф╕вхд▒хНбчЙЗцАОф╣ИхКЮя╝Я",
        "ш┤╖цм╛ш╡Дца╝цаЗхЗЖ",
        "х╜УхЙНхИйчОЗ",
        "хжВф╜ХцЯешпвш┤жцИ╖ф╜ЩщвЭя╝Я",
        "цЫ┤цЦ░шБФч│╗ф┐бцБп",
      ],
      placeholder: "хТишпвщУ╢шбМцЬНхКб...",
      aiThinking: "AIцнгхЬицАЭшАГ...",
      fallbackResponses: [
        "цИСф╕НчбохоЪцИСцШпхРжчРЖшзгуАВцВишГ╜щЗНцЦ░шбиш┐░ф╕Аф╕ЛцВичЪДщЧощвШхРЧя╝Я",
        "ш┐ЩцШпф╕Аф╕кцЬЙш╢гчЪДщЧощвШуАВшойцИСф╕║цВишБФч│╗ф╕Аф╜НхПпф╗ех╕ох┐ЩчЪДф║║ч▒╗ф╕Ухо╢уАВ",
        "цИСш┐ШхЬихнжф╣ащУ╢шбМцЬНхКбуАВцВишГ╜х░ЭшпХчФиф╕НхРМчЪДцЦ╣х╝ПцПРщЧохРЧя╝Я",
        "цИСш┐Шц▓бцЬЙш┐ЩцЦ╣щЭвчЪДф┐бцБпуАВшп╖шБФч│╗цИСф╗мчЪДховцИ╖цФпцМБ1800-123-4567шО╖хПЦх╕охКйуАВ",
      ],
      errorMessage:
        "цИСщБЗхИ░ф║ЖцКАцЬпхЫ░щЪ╛уАВшп╖чиНхРОхЖНшпХцИЦшБФч│╗цИСф╗мчЪДховцИ╖цФпцМБ1800-123-4567уАВЁЯЫая╕П",
    },
    ar: {
      greeting:
        "┘Е╪▒╪н╪и┘Л╪з! ╪г┘Ж╪з ┘Е╪│╪з╪╣╪п┘Г ╪з┘Д┘Е╪╡╪▒┘Б┘К ╪з┘Д╪░┘Г┘К. ┘Г┘К┘Б ┘К┘Е┘Г┘Ж┘Ж┘К ┘Е╪│╪з╪╣╪п╪к┘Г ╪з┘Д┘К┘И┘Е╪Я ЁЯСЛ",
      listening: "╪г╪│╪к┘Е╪╣...",
      notUnderstood: "╪╣╪░╪▒┘Л╪з╪М ┘Д┘Е ╪г╪│╪к╪╖╪╣ ╪│┘Е╪з╪╣┘Г ╪и┘И╪╢┘И╪н. ┘К╪▒╪м┘Й ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Е╪▒╪й ╪г╪о╪▒┘Й. ЁЯОд",
      quickQuestionsTitle: "╪г╪│╪ж┘Д╪й ╪│╪▒┘К╪╣╪й:",
      quickQuestions: [
        "┘Г┘К┘Б┘К╪й ┘Б╪к╪н ╪н╪│╪з╪и╪Я",
        "┘Е╪з ┘З┘И ╪з┘Д╪н╪п ╪з┘Д╪г╪п┘Ж┘Й ┘Д┘Д╪▒╪╡┘К╪п╪Я",
        "┘Г┘К┘Б┘К╪й ╪к╪н┘И┘К┘Д ╪з┘Д╪г┘Е┘И╪з┘Д╪Я",
        "┘Б┘В╪п╪к ╪и╪╖╪з┘В╪к┘К - ┘Е╪з╪░╪з ╪г┘Б╪╣┘Д╪Я",
        "┘Е╪╣╪з┘К┘К╪▒ ╪з┘Д╪г┘З┘Д┘К╪й ┘Д┘Д┘В╪▒╪╢",
        "╪г╪│╪╣╪з╪▒ ╪з┘Д┘Б╪з╪ж╪п╪й ╪з┘Д╪н╪з┘Д┘К╪й",
        "┘Г┘К┘Б┘К╪й ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪▒╪╡┘К╪п ╪з┘Д╪н╪│╪з╪и╪Я",
        "╪к╪н╪п┘К╪л ┘Е╪╣┘Д┘И┘Е╪з╪к ╪з┘Д╪з╪к╪╡╪з┘Д",
      ],
      placeholder: "╪з╪│╪г┘Д ╪╣┘Ж ╪з┘Д╪о╪п┘Е╪з╪к ╪з┘Д┘Е╪╡╪▒┘Б┘К╪й...",
      aiThinking: "╪з┘Д╪░┘Г╪з╪б ╪з┘Д╪з╪╡╪╖┘Ж╪з╪╣┘К ┘К┘Б┘Г╪▒...",
      fallbackResponses: [
        "┘Д╪│╪к ┘Е╪к╪г┘Г╪п┘Л╪з ┘Е┘Е╪з ╪е╪░╪з ┘Г┘Ж╪к ╪г┘Б┘З┘Е. ┘З┘Д ┘К┘Е┘Г┘Ж┘Г ╪е╪╣╪з╪п╪й ╪╡┘К╪з╪║╪й ╪│╪д╪з┘Д┘Г╪Я",
        "┘З╪░╪з ╪│╪д╪з┘Д ┘Е╪л┘К╪▒ ┘Д┘Д╪з┘З╪к┘Е╪з┘Е. ╪п╪╣┘Ж┘К ╪г┘И╪╡┘Д┘Г ╪и╪г╪о╪╡╪з╪ж┘К ╪и╪┤╪▒┘К ┘К┘Е┘Г┘Ж┘З ╪з┘Д┘Е╪│╪з╪╣╪п╪й.",
        "┘Е╪з ╪▓┘Д╪к ╪г╪к╪╣┘Д┘Е ╪з┘Д╪о╪п┘Е╪з╪к ╪з┘Д┘Е╪╡╪▒┘Б┘К╪й. ┘З┘Д ┘К┘Е┘Г┘Ж┘Г ╪з┘Д┘Е╪н╪з┘И┘Д╪й ╪и╪з┘Д╪│╪д╪з┘Д ╪и╪╖╪▒┘К┘В╪й ┘Е╪о╪к┘Д┘Б╪й╪Я",
        "┘Д┘К╪│ ┘Д╪п┘К ┘Е╪╣┘Д┘И┘Е╪з╪к ╪╣┘Ж ╪░┘Д┘Г ╪и╪╣╪п. ┘К╪▒╪м┘Й ╪з┘Д╪з╪к╪╡╪з┘Д ╪и╪п╪╣┘Е ╪з┘Д╪╣┘Е┘Д╪з╪б ╪╣┘Д┘Й ╪з┘Д╪▒┘В┘Е 1800-123-4567 ┘Д┘Д╪н╪╡┘И┘Д ╪╣┘Д┘Й ╪з┘Д┘Е╪│╪з╪╣╪п╪й.",
      ],
      errorMessage:
        "╪г┘И╪з╪м┘З ╪╡╪╣┘И╪и╪з╪к ╪к┘В┘Ж┘К╪й. ┘К╪▒╪м┘Й ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Е╪▒╪й ╪г╪о╪▒┘Й ┘Д╪з╪н┘В┘Л╪з ╪г┘И ╪з┘Д╪з╪к╪╡╪з┘Д ╪и╪п╪╣┘Е ╪з┘Д╪╣┘Е┘Д╪з╪б ╪╣┘Д┘Й ╪з┘Д╪▒┘В┘Е 1800-123-4567. ЁЯЫая╕П",
    },
  };

  // Initialize speech recognition with current language
  useEffect(() => {
    // Check if browser supports Web Speech API
    if ("webkitSpeechRecognition" in window || "SpeechRecognition" in window) {
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = true;

      // Set language based on current selection
      recognitionRef.current.lang =
        getSpeechRecognitionLangCode(currentLanguage);

      recognitionRef.current.onresult = (event) => {
        const transcript = Array.from(event.results)
          .map((result) => result[0])
          .map((result) => result.transcript)
          .join("");
        setInputMessage(transcript);
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };

      recognitionRef.current.onerror = (event) => {
        console.error("Speech recognition error", event.error);
        setIsListening(false);
        setMessages((prev) => [
          ...prev,
          {
            text: languageContent[currentLanguage].notUnderstood,
            sender: "bot",
            timestamp: new Date(),
          },
        ]);
      };
    } else {
      console.warn("Speech recognition not supported in this browser");
    }

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };
  }, [currentLanguage]);

  // Update speech recognition when language changes
  useEffect(() => {
    if (recognitionRef.current) {
      recognitionRef.current.lang =
        getSpeechRecognitionLangCode(currentLanguage);
    }
  }, [currentLanguage]);

  // Map language codes to speech recognition codes
  const getSpeechRecognitionLangCode = (langCode) => {
    const langMap = {
      en: "en-US",
      hi: "hi-IN",
      es: "es-ES",
      fr: "fr-FR",
      de: "de-DE",
      pt: "pt-PT",
      it: "it-IT",
      ru: "ru-RU",
      ja: "ja-JP",
      zh: "zh-CN",
      ar: "ar-SA",
    };
    return langMap[langCode] || "en-US";
  };

  // Enhanced banking knowledge base with multilingual support
  useEffect(() => {
   
      // In a real application, you would have multilingual banking knowledge
      // For this example, we'll use the English knowledge base
      if (currentLanguage === "en") {
        setBankingKnowledge(bankingKnowledgeEnglish);
      } 
 
      else if (currentLanguage === "hi") {
        setBankingKnowledge(bankingKnowledgesHindi);
    
    }

  }, [currentLanguage]);
  //console.log(bankingKnowledgesHindi)

  // Load TensorFlow.js and Universal Sentence Encoder
  useEffect(() => {
    const loadModel = async () => {
      try {
        await tf.ready();
        const loadedModel = await use.load();
        setModel(loadedModel);

        // Add initial greeting after model is loaded
        setMessages([
          {
            text: languageContent[currentLanguage].greeting,
            sender: "bot",
            timestamp: new Date(),
          },
        ]);

        setIsModelLoading(false);
      } catch (error) {
        console.error("Error loading model:", error);
        // Fallback to keyword matching if model fails to load
        setMessages([
          {
            text: languageContent[currentLanguage].greeting,
            sender: "bot",
            timestamp: new Date(),
          },
        ]);
        setIsModelLoading(false);
      }
    };

    loadModel();
  }, [currentLanguage]);

  // Scroll to bottom of messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Toggle voice listening
  const toggleListening = () => {
    if (isListening) {
      recognitionRef.current.stop();
      setIsListening(false);
    } else {
      try {
        recognitionRef.current.start();
        setIsListening(true);
        setInputMessage(""); // Clear input when starting to listen
      } catch (error) {
        console.error("Error starting speech recognition:", error);
        setIsListening(false);
      }
    }
  };

  //Speak text using speech synthesis
  const speakText = (text) => {
    if ("speechSynthesis" in window) {
      const speech = new SpeechSynthesisUtterance();
      speech.text = text;
      speech.volume = 0;
      speech.rate = 1;
      speech.pitch = 1;
      speech.lang = getSpeechRecognitionLangCode(currentLanguage);

      window.speechSynthesis.speak(speech);
    }
  };

  // Calculate similarity between user query and knowledge base using embeddings
  const findBestMatch = async (userQuery) => {
    if (!model) return null;

    try {
      // Generate embeddings for user query and all knowledge base questions
      const queries = [
        userQuery,
        ...bankingKnowledge.map((item) => item.question),
      ];
      const embeddings = await model.embed(queries);

      // Calculate cosine similarity between user query and each knowledge base item
      const queryEmbedding = embeddings.slice([0, 0], [1]);
      const knowledgeEmbeddings = embeddings.slice(
        [1, 0],
        [bankingKnowledge.length]
      );

      const similarities = [];
      for (let i = 0; i < bankingKnowledge.length; i++) {
        const knowledgeEmbedding = knowledgeEmbeddings.slice([i, 0], [1]);
        const similarity = await calculateCosineSimilarity(
          queryEmbedding,
          knowledgeEmbedding
        );
        similarities.push({ index: i, similarity: similarity.dataSync()[0] });
      }

      // Sort by similarity and return the best match
      similarities.sort((a, b) => b.similarity - a.similarity);

      // Return the best match if similarity is above threshold
      if (similarities[0].similarity > 0.5) {
        return bankingKnowledge[similarities[0].index];
      }

      return null;
    } catch (error) {
      console.error("Error finding match:", error);
      return null;
    }
  };

  // Calculate cosine similarity between two tensors
  const calculateCosineSimilarity = async (a, b) => {
    const aNormalized = a.div(a.norm());
    const bNormalized = b.div(b.norm());
    return aNormalized.dot(bNormalized.transpose());
  };

  // Fallback to keyword matching if embedding approach fails
  const keywordMatch = (message) => {
    const lowerMessage = message.toLowerCase();

    for (const item of bankingKnowledge) {
      if (
        item.keywords.some(
          (keyword) =>
            lowerMessage.includes(keyword.toLowerCase()) ||
            calculateLevenshteinSimilarity(
              lowerMessage,
              keyword.toLowerCase()
            ) > 0.8
        )
      ) {
        return item;
      }
    }

    return null;
  };

  // Calculate string similarity using Levenshtein distance
  const calculateLevenshteinSimilarity = (a, b) => {
    const matrix = [];

    // Increment along the first column of each row
    for (let i = 0; i <= b.length; i++) {
      matrix[i] = [i];
    }

    // Increment each column in the first row
    for (let j = 0; j <= a.length; j++) {
      matrix[0][j] = j;
    }

    // Fill in the rest of the matrix
    for (let i = 1; i <= b.length; i++) {
      for (let j = 1; j <= a.length; j++) {
        if (b.charAt(i - 1) === a.charAt(j - 1)) {
          matrix[i][j] = matrix[i - 1][j - 1];
        } else {
          matrix[i][j] = Math.min(
            matrix[i - 1][j - 1] + 1, // substitution
            Math.min(
              matrix[i][j - 1] + 1, // insertion
              matrix[i - 1][j] + 1 // deletion
            )
          );
        }
      }
    }

    const distance = matrix[b.length][a.length];
    const maxLength = Math.max(a.length, b.length);

    return maxLength === 0 ? 1 : 1 - distance / maxLength;
  };

  // Handle context-aware responses
  const getContextAwareResponse = (userMessage, matchedItem) => {
    // Simple context tracking - in a real application, this would be more sophisticated
    const lastUserMessage = conversationContext[conversationContext.length - 1];

    if (
      lastUserMessage &&
      lastUserMessage.toLowerCase().includes("loan") &&
      userMessage.toLowerCase().includes("document")
    ) {
      return {
        answer:
          "For loan applications, you typically need:\n- ID proof (Aadhaar, PAN, Passport)\n- Address proof\n- Income documents (salary slips, bank statements)\n- Employment proof\n\nWould you like to know about specific loan types? ЁЯУД",
        question: "loan documents",
      };
    }

    return matchedItem;
  };

  // Process user message
  const processMessage = async (message) => {
    if (!message.trim()) return;

    // Add user message to chat and context
    const userMessage = {
      text: message,
      sender: "user",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setConversationContext((prev) => [...prev, message]);
    setInputMessage("");
    setIsLoading(true);

    try {
      // Try to find a match using embeddings first
      let matchedItem = await findBestMatch(message);

      // If no match found with embeddings, try keyword matching
      if (!matchedItem) {
        matchedItem = keywordMatch(message);
      }

      // Apply context if available
      const contextAwareItem = getContextAwareResponse(message, matchedItem);

      setTimeout(() => {
        let botResponse;

        if (contextAwareItem) {
          botResponse = contextAwareItem.answer;
        } else {
          // If no match found, use a more intelligent fallback
          const fallbackResponses =
            languageContent[currentLanguage].fallbackResponses;

          // Select a random fallback response
          botResponse =
            fallbackResponses[
              Math.floor(Math.random() * fallbackResponses.length)
            ] + " ЁЯдФ";
        }

        setMessages((prev) => [
          ...prev,
          {
            text: botResponse,
            sender: "bot",
            timestamp: new Date(),
          },
        ]);

        // Speak the response
        speakText(botResponse.replace(/[^\w\s!?.,]/g, ""));

        setIsLoading(false);
      }, 1000);
    } catch (error) {
      console.error("Error processing message:", error);
      setTimeout(() => {
        const errorMessage = languageContent[currentLanguage].errorMessage;
        setMessages((prev) => [
          ...prev,
          {
            text: errorMessage,
            sender: "bot",
            timestamp: new Date(),
          },
        ]);

        // Speak the error message
        speakText(errorMessage);

        setIsLoading(false);
      }, 1000);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    processMessage(inputMessage);
  };

  const handleQuickQuestion = (question) => {
    setInputMessage(question);
    processMessage(question);
  };

  const handleLanguageChange = (langCode) => {
    setCurrentLanguage(langCode);

    // Update the chat with a greeting in the new language
    setMessages([
      {
        text: languageContent[langCode].greeting,
        sender: "bot",
        timestamp: new Date(),
      },
    ]);
  };

  if (isModelLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
        <div className="bg-white rounded-2xl shadow-xl p-8 max-w-md w-full text-center">
          <div className="flex justify-center">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
          </div>
          <p className="mt-4 text-gray-600 font-medium">
            Loading AI assistant...
          </p>
          <p className="mt-2 text-gray-500 text-sm">
            Initializing neural networks for better banking assistance
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 md:p-6 flex flex-col">
      <div className="max-w-4xl mx-auto w-full flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-white rounded-2xl shadow-md p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className="bg-indigo-100 p-3 rounded-2xl mr-4">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-8 w-8 text-indigo-600"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
                  />
                </svg>
              </div>
              <div>
                <h2 className="text-2xl font-bold text-gray-800">
                  AI Banking Assistant
                </h2>
                <p className="text-gray-600">
                  Powered by TensorFlow.js for smarter banking help
                </p>
              </div>
            </div>

            <div className="relative">
              {/* Toggle button */}
              <button
                onClick={() => setIsOpen(!isOpen)}
                className="flex items-center space-x-2 bg-gray-100 hover:bg-gray-200 rounded-xl px-3 py-2 transition-colors"
              >
                <span>
                  {
                    availableLanguages.find(
                      (lang) => lang.code === currentLanguage
                    )?.flag
                  }
                </span>
                <span className="hidden md:inline">
                  {
                    availableLanguages.find(
                      (lang) => lang.code === currentLanguage
                    )?.name
                  }
                </span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className={`h-4 w-4 transform transition-transform ${
                    isOpen ? "rotate-180" : ""
                  }`}
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </button>

              {/* Dropdown */}
              {isOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10">
                  {availableLanguages.map((language) => (
                    <button
                      key={language.code}
                      onClick={() => {
                        handleLanguageChange(language.code);
                        setIsOpen(false); // close menu after selecting
                      }}
                      className={`flex items-center space-x-2 w-full px-4 py-2 text-left hover:bg-gray-100 ${
                        currentLanguage === language.code
                          ? "bg-indigo-50 text-indigo-700"
                          : ""
                      }`}
                    >
                      <span>{language.flag}</span>
                      <span>{language.name}</span>
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Quick Questions */}
        <div className="bg-white rounded-2xl shadow-md p-6 mb-6">
          <p className="text-gray-700 font-medium mb-3 flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-indigo-500 mr-2"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"
              />
            </svg>
            {languageContent[currentLanguage].quickQuestionsTitle}
          </p>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            {languageContent[currentLanguage]?.quickQuestions?.map(
              (question, index) => (
                <button
                  key={index}
                  onClick={() => handleQuickQuestion(question)}
                  className="bg-indigo-50 hover:bg-indigo-100 text-indigo-700 text-sm font-medium rounded-xl py-2 px-4 transition-colors duration-200 text-left"
                >
                  {question}
                </button>
              )
            )}
          </div>
        </div>

        {/* Chat Messages */}
        <div className="bg-white rounded-2xl shadow-md p-4 flex-1 flex flex-col mb-6">
          <div className="flex-1 overflow-y-auto p-2 space-y-4">
            {messages.map((message, index) => (
              <div
                key={index}
                className={`flex ${
                  message.sender === "user" ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`max-w-xs md:max-w-md rounded-2xl p-4 ${
                    message.sender === "user"
                      ? "bg-indigo-500 text-white rounded-br-none"
                      : "bg-gray-100 text-gray-800 rounded-bl-none"
                  }`}
                >
                  <ReactMarkdown>{message.text}</ReactMarkdown>
                  <div
                    className={`text-xs mt-1 ${
                      message.sender === "user"
                        ? "text-indigo-200"
                        : "text-gray-500"
                    }`}
                  >
                    {message.timestamp.toLocaleTimeString([], {
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </div>
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-gray-100 text-gray-800 rounded-2xl rounded-bl-none p-4">
                  <div className="flex items-center">
                    <div className="flex space-x-2 mr-2">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.2s" }}
                      ></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.4s" }}
                      ></div>
                    </div>
                    <span className="text-sm">
                      {languageContent[currentLanguage].aiThinking}
                    </span>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Input Form */}
        <form
          onSubmit={handleSubmit}
          className="bg-white rounded-2xl shadow-md p-4"
        >
          <div className="flex space-x-3">
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              placeholder={languageContent[currentLanguage].placeholder}
              disabled={isLoading}
              className="flex-1 bg-gray-100 border-0 rounded-2xl px-4 py-3 text-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />
            <button
              type="button"
              onClick={toggleListening}
              disabled={isLoading}
              className={`p-3 rounded-2xl ${
                isListening
                  ? "bg-red-500 text-white"
                  : "bg-gray-200 text-gray-700 hover:bg-gray-300"
              } transition-colors duration-200`}
            >
              {isListening ? (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"
                  />
                </svg>
              ) : (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"
                  />
                </svg>
              )}
            </button>
            <button
              type="submit"
              disabled={isLoading || !inputMessage.trim()}
              className="bg-indigo-600 text-white rounded-2xl p-3 disabled:opacity-50 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M13 5l7 7-7 7M5 5l7 7-7 7"
                />
              </svg>
            </button>
          </div>
          {isListening && (
            <div className="mt-2 text-sm text-indigo-600 flex items-center">
              <div className="flex space-x-1 mr-2">
                <div className="w-2 h-2 bg-indigo-600 rounded-full animate-pulse"></div>
                <div
                  className="w-2 h-2 bg-indigo-600 rounded-full animate-pulse"
                  style={{ animationDelay: "0.2s" }}
                ></div>
                <div
                  className="w-2 h-2 bg-indigo-600 rounded-full animate-pulse"
                  style={{ animationDelay: "0.4s" }}
                ></div>
              </div>
              {languageContent[currentLanguage].listening}
            </div>
          )}
        </form>
      </div>
    </div>
  );
};

export default Help;
